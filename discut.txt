Colin:

Etat actuel de la frame:


Application
	|
	|__VUE_BandeauHaut
	|	|
	|	|__parameter button
	|	|
	|	|__logo
	|	|
	|	|__button AJOUTER
	|
	|__VUE_BandeauLateral
	|	|
	|	|__filter
	|	|
	|	|__search
	|	|
	|	|__get path
	|
	|__VUE_BandeauCentral
		|
		|__use Case class
			|
			|__use Pic class	
			
			
Nathanael j'ai vu que tu as ouvert le truc de JUnit mais il faut les faire les test unitaire ou pas 

------------
Nath: Qu'est-ce que tu entends par "ouvrir le truc de JUnit"? En tous les cas, les tests unitaires ont l'air de faire partie du barème. En général c'est bien d'en faire (lorsque c'est possible, que cela paraît utile, et que cela a un sens). C'est un bon moyen de vérifier que des changements quelconques n'ont pas cassé ce qui fonctionnait précédemment.

Sinon j'ai vu que tu avais retiré le fichier main.java et que tu avais mis la fonction main dans Application. Je pense qu'à court terme ça ne pose pas de problème, d'ailleurs pour des raisons pratiques, tant qu'on n'a pas une version stable qui rassemble toutes les parties du programme, il vaut mieux avoir plusieurs fonctions main qui permettent de lancer les diverses parties du programme de manière séparée (en fait j'aurais préféré que tu ne supprime pas le fichier main.java qui contenait le code qui permettait de tester le modèle et le controlleur. Rien n'interdit d'avoir plus d'une fonction main dans un même projet).

A long terme, je pense qu'il vaut mieux avoir un point de départ "réel/officiel" du programme indépendant de toute autre classe/fichier, même si par ailleurs on continue à utiliser d'autres fonctions main "pour nous" pour tester des sous-parties du programme que l'on développe. En l'état la fonction main qui reste est dans une classe exclusivement dédiée à la partie "vue", à mon sens cela fait double emploi et risque d'empirer les problèmes de conflits au niveau de GIT (sauf si elle est considérée comme une fonction main "pour nous" auquel cas il n'y avait pas besoin de supprimer la classe main précédente).

Qu'en pensez-vous ?
------------
Nath: La fonction model.refresh() sera celle à appeler depuis le controlleur lorsque le bouton de rafraichissement sera cliqué par l'utilisateur.
Je me suis fait deux fonction main temporaires dans Model.java pour tester le lien modèle-controlleur, et tester que la fenêtre se ferme bien lorsqu'on appuie sur la croix après avoir relié Application et Control avec addWindowListener.
J'ai créé un fichier versions-suivantes.txt pour mettre toutes les idées d'améliorations que l'on pourra avoir pour les versions d'après celle qu'on sera en train de développer.
J'ai créé une fonction statique dans Tools qui est un alias de System.out.println pour deux raisons:
* le nom d'origine est beaucoup trop long
* il est utile de faire passer les logs par cette fonction, ainsi si l'on veut cacher cet affichage on n'a qu'à commenter une ligne dans Tools.java au lieu de chercher tous les endroits où on aura utilisé System.out.println
Je pense que c'est une bonne idée de limiter son usage au cas d'information sur le programme pour nous-même dans le cadre de son fonctionnement normal (eg: afficher "fin du programme" avant la fin du programme).
Au contraire, par exemple, d'utiliser System.out.println pour des raisons de débuggage: afficher une variable pour savoir ce qui se passe dans le programme, durant le développement.
On pourra en parler plus Vendredi :)
-------------
Nath: Je ne pense pas que ce soit une bonne idée de dessiner du texte avec les fonctions g.drawString et de placer tous les éléments du panneau latéral à des tailles fixes. La manière plus souple (et plus simple) en général est de créer des éléments Label (il doit y avoir une classe de widgets pour afficher du texte), et de gérer la position de tous les éléments du Panel à l'aide d'un layout qui gère la position des éléments de manière automatique.
Un inconvénient immédiat de préciser la position absolue de chaque élément (en plus du fait que c'est dix fois plus dur) c'est que si l'utilisateur redimentionne la fenêtre, le panel n'en tient pas compte et très vite on n'y voit plus rien.
Egalement apparemment colin tu as eu des problèmes avec GIT qui ont provoqués la création de commits "merge". Est-ce que c'est parce que tu faisais des commits avant de récupérer ce qui avait été fait auparavant? Il faudrait qu'on en parle (de vive voix), c'est un peu gênant. En tous les cas, pensez vraiment à récupérer tout ce qui peut avoir été fait par les autres *avant* de faire des commits (même en local, càd même avant de pusher). L'idéal c'est de ne commencer à travailler qu'après avoir récupéré ce que les autres ont fait.
Sinon, apparemment vous n'êtes pas là (en "cours" le vendredi aprèm). Ce serait bien que vous me préveniez en général, pour que je sache si ça vaut le coup de moi venir.
Qui plus est, si vous n'êtes pas là et que vous ne participez pas à la discussion dans ce fichier, on va avoir du mal à travailler ensemble... Dans l'idéal ça serait vraiment bien qu'on puisse se parler de vive voix chaque semaine : écrire tout ce que je pourrais vouloir vous dire c'est assez chiant.
Tenez-moi au courant pour la suite.
------------
Colin:Oué desolé de pas t'avoir prevenu plus tôt, normalement ça arrivera plus tkt.J'ai regardé ce que tu avais fait et j'aimerais juste savoir a quoi sert la classe Bag et je ferais passer à quentin le message a propos de la Frame et des Panels 


